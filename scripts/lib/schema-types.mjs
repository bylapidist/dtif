import { compileFromFile } from 'json-schema-to-typescript';

export const bannerComment = `/* eslint-disable */\n/**\n * This file was automatically generated by json-schema-to-typescript.\n * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n * and run json-schema-to-typescript to regenerate this file.\n */`;

const designTokenInterfaceBlock = [
  'export type DesignTokenInterchangeFormat = TokenMemberMap & {',
  '  $schema?: SchemaDeclaration;',
  '  $description?: Description;',
  '  $version?: DocumentVersion;',
  '  $extensions?: DocumentExtensions;',
  '  $overrides?: Overrides;',
  '  [k: string]: unknown;',
  '};'
].join('\n');

const designTokenReplacement = [
  'export type DesignTokenInterchangeFormat = TokenMemberMap & {',
  '  $schema?: SchemaDeclaration;',
  '  $description?: Description;',
  '  $version?: DocumentVersion;',
  '  $extensions?: DocumentExtensions;',
  '  $overrides?: Overrides;',
  '};'
].join('\n');

const tokenMemberInterfaceBlock = [
  'export interface TokenMemberMap {',
  '  [k: string]: TokenOrCollectionNode;',
  '}',
  ''
].join('\n');

const tokenMemberReplacement = [
  'export type TokenMemberMap = {',
  '  [K in string as K extends `$${string}` ? never : K]?: TokenOrCollectionNode;',
  '};',
  ''
].join('\n');

function normalizeSchemaTypes(source) {
  return `${source.trimEnd()}\n`;
}

export function applySchemaTypeTransforms(source) {
  let transformed = source;

  if (!transformed.includes(designTokenInterfaceBlock)) {
    throw new Error(
      'Failed to locate DesignTokenInterchangeFormat declaration in generated schema types'
    );
  }
  transformed = transformed.replace(designTokenInterfaceBlock, () => designTokenReplacement);

  if (!transformed.includes(tokenMemberInterfaceBlock)) {
    throw new Error('Failed to locate TokenMemberMap declaration in generated schema types');
  }
  transformed = transformed.replace(tokenMemberInterfaceBlock, () => tokenMemberReplacement);

  return normalizeSchemaTypes(transformed);
}

export async function compileSchemaTypes(schemaPath, options = {}) {
  const { cwd } = options;
  const compiled = await compileFromFile(schemaPath, {
    cwd,
    bannerComment
  });

  return applySchemaTypeTransforms(compiled);
}
